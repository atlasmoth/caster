version: "3.7"
services:
  kratos_postgres:
    image: postgres:16
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DATABASE_USER}",
          "-d",
          "${DATABASE_PASSWORD}",
        ]
      interval: 1s
      timeout: 5s
      retries: 10
    env_file: ./.env
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: caster
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - caster
    command: bash -c "chmod +x /docker-entrypoint-initdb.d/init-multiple-databases.sh && docker-entrypoint.sh postgres"

  caster_kratos_migrate:
    image: oryd/kratos:v1.2.0
    env_file: ./.env
    environment:
      - DSN=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@kratos_postgres:5432/${DATABASE_NAME}?sslmode=disable
      - SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS=${SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS}
    volumes:
      - type: bind
        source: ./kratos
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - caster
    depends_on:
      - kratos_postgres

  caster_kratos:
    depends_on:
      - caster_kratos_migrate
    image: oryd/kratos:v1.2.0
    ports:
      - "4433:4433"
      - "4434:4434"
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DSN=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@kratos_postgres:5432/${DATABASE_NAME}?sslmode=disable
      - LOG_LEVEL=trace
      - SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS=${SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS}
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - type: bind
        source: ./kratos
        target: /etc/config/kratos
    networks:
      - caster

  caster:
    build:
      context: .
      dockerfile: ./caster/Dockerfile
    depends_on:
      - caster_kratos
    ports:
      - "8083:8083"
    environment:
      - GIN_MODE=release
    networks:
      - caster

  billing:
    build:
      context: .
      dockerfile: ./billing/Dockerfile
    depends_on:
      - caster_kratos
      - migrate
    ports:
      - "8084:8084"
    env_file: ./.env
    environment:
      - GIN_MODE=release
      - DSN=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@kratos_postgres:5432/caster?sslmode=disable
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
    networks:
      - caster

  migrate:
    image: migrate/migrate
    networks:
      - caster
    volumes:
      - type: bind
        source: ./billing/migrations
        target: /etc/billing/migrations
    command:
      [
        "-path",
        "/etc/billing/migrations",
        "-database",
        "postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@kratos_postgres:5432/caster?sslmode=disable",
        "up",
      ]
    links:
      - kratos_postgres
    depends_on:
      - kratos_postgres

networks:
  caster:
    driver: bridge

volumes:
  postgres-data:
